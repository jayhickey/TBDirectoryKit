//
//  TBDirectoryIcons.swift
//  TBDirectory
//
//  Created by Tim Bueno on 2015-08-15.
//  Copyright (c) 2015 Tim Bueno. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class TBDirectoryIcons : NSObject {

    //// Drawing Methods

    public class func drawDownloadIcon(frame frame: CGRect, color: UIColor) {

        //// Arrow Drawing
        let arrowPath = UIBezierPath()
        arrowPath.moveToPoint(CGPointMake(frame.minX + 0.56250 * frame.width, frame.minY + 0.42174 * frame.height))
        arrowPath.addLineToPoint(CGPointMake(frame.minX + 0.43750 * frame.width, frame.minY + 0.42174 * frame.height))
        arrowPath.addLineToPoint(CGPointMake(frame.minX + 0.43750 * frame.width, frame.minY + 0.67217 * frame.height))
        arrowPath.addLineToPoint(CGPointMake(frame.minX + 0.34375 * frame.width, frame.minY + 0.67217 * frame.height))
        arrowPath.addLineToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.86000 * frame.height))
        arrowPath.addLineToPoint(CGPointMake(frame.minX + 0.65625 * frame.width, frame.minY + 0.67217 * frame.height))
        arrowPath.addLineToPoint(CGPointMake(frame.minX + 0.56250 * frame.width, frame.minY + 0.67217 * frame.height))
        arrowPath.addLineToPoint(CGPointMake(frame.minX + 0.56250 * frame.width, frame.minY + 0.42174 * frame.height))
        arrowPath.closePath()
        arrowPath.miterLimit = 4;

        color.setFill()
        arrowPath.fill()


        //// Cloud Drawing
        let cloudPath = UIBezierPath()
        cloudPath.moveToPoint(CGPointMake(frame.minX + 0.86206 * frame.width, frame.minY + 0.39707 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.67188 * frame.width, frame.minY + 0.26522 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.83313 * frame.width, frame.minY + 0.32003 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.75887 * frame.width, frame.minY + 0.26522 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.61419 * frame.width, frame.minY + 0.27354 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.65184 * frame.width, frame.minY + 0.26522 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.63250 * frame.width, frame.minY + 0.26813 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.37500 * frame.width, frame.minY + 0.14000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.56463 * frame.width, frame.minY + 0.19337 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.47603 * frame.width, frame.minY + 0.14000 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.09381 * frame.width, frame.minY + 0.41557 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.22175 * frame.width, frame.minY + 0.14000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.09706 * frame.width, frame.minY + 0.26284 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.57826 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.03772 * frame.width, frame.minY + 0.44810 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.50886 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.18750 * frame.width, frame.minY + 0.76609 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.68194 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.08400 * frame.width, frame.minY + 0.76609 * frame.height))
        cloudPath.addLineToPoint(CGPointMake(frame.minX + 0.32812 * frame.width, frame.minY + 0.76609 * frame.height))
        cloudPath.addLineToPoint(CGPointMake(frame.minX + 0.27603 * frame.width, frame.minY + 0.70348 * frame.height))
        cloudPath.addLineToPoint(CGPointMake(frame.minX + 0.18741 * frame.width, frame.minY + 0.70348 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.06250 * frame.width, frame.minY + 0.57826 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.11856 * frame.width, frame.minY + 0.70348 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.06250 * frame.width, frame.minY + 0.64741 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.15897 * frame.width, frame.minY + 0.45630 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.06250 * frame.width, frame.minY + 0.51900 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.10366 * frame.width, frame.minY + 0.46926 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.15625 * frame.width, frame.minY + 0.42174 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.15716 * frame.width, frame.minY + 0.44506 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.15625 * frame.width, frame.minY + 0.43351 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.37500 * frame.width, frame.minY + 0.20261 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.15625 * frame.width, frame.minY + 0.30072 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.25419 * frame.width, frame.minY + 0.20261 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.58444 * frame.width, frame.minY + 0.35835 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.47381 * frame.width, frame.minY + 0.20261 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.55731 * frame.width, frame.minY + 0.26825 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.67188 * frame.width, frame.minY + 0.32783 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.60847 * frame.width, frame.minY + 0.33922 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.63878 * frame.width, frame.minY + 0.32783 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.81166 * frame.width, frame.minY + 0.45304 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.74425 * frame.width, frame.minY + 0.32783 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.80391 * frame.width, frame.minY + 0.38261 * frame.height))
        cloudPath.addLineToPoint(CGPointMake(frame.minX + 0.81259 * frame.width, frame.minY + 0.45304 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.93750 * frame.width, frame.minY + 0.57826 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.88144 * frame.width, frame.minY + 0.45304 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.93750 * frame.width, frame.minY + 0.50911 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.81259 * frame.width, frame.minY + 0.70348 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.93750 * frame.width, frame.minY + 0.64729 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.88159 * frame.width, frame.minY + 0.70348 * frame.height))
        cloudPath.addLineToPoint(CGPointMake(frame.minX + 0.72397 * frame.width, frame.minY + 0.70348 * frame.height))
        cloudPath.addLineToPoint(CGPointMake(frame.minX + 0.67188 * frame.width, frame.minY + 0.76609 * frame.height))
        cloudPath.addLineToPoint(CGPointMake(frame.minX + 0.81250 * frame.width, frame.minY + 0.76609 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.57826 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.91600 * frame.width, frame.minY + 0.76609 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.68178 * frame.height))
        cloudPath.addCurveToPoint(CGPointMake(frame.minX + 0.86206 * frame.width, frame.minY + 0.39707 * frame.height), controlPoint1: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.49170 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.94156 * frame.width, frame.minY + 0.41883 * frame.height))
        cloudPath.closePath()
        cloudPath.miterLimit = 4;

        color.setFill()
        cloudPath.fill()
    }

    public class func drawCautionIcon(frame frame: CGRect, color: UIColor) {

        //// Triangle Drawing
        let trianglePath = UIBezierPath()
        trianglePath.moveToPoint(CGPointMake(frame.minX + 0.99571 * frame.width, frame.minY + 0.90880 * frame.height))
        trianglePath.addLineToPoint(CGPointMake(frame.minX + 0.53033 * frame.width, frame.minY + 0.06477 * frame.height))
        trianglePath.addCurveToPoint(CGPointMake(frame.minX + 0.50001 * frame.width, frame.minY + 0.04688 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.52425 * frame.width, frame.minY + 0.05374 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.51262 * frame.width, frame.minY + 0.04688 * frame.height))
        trianglePath.addCurveToPoint(CGPointMake(frame.minX + 0.46968 * frame.width, frame.minY + 0.06477 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.48738 * frame.width, frame.minY + 0.04688 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.47576 * frame.width, frame.minY + 0.05374 * frame.height))
        trianglePath.addLineToPoint(CGPointMake(frame.minX + 0.00430 * frame.width, frame.minY + 0.90880 * frame.height))
        trianglePath.addCurveToPoint(CGPointMake(frame.minX + 0.00483 * frame.width, frame.minY + 0.94304 * frame.height), controlPoint1: CGPointMake(frame.minX + -0.00160 * frame.width, frame.minY + 0.91950 * frame.height), controlPoint2: CGPointMake(frame.minX + -0.00140 * frame.width, frame.minY + 0.93252 * frame.height))
        trianglePath.addCurveToPoint(CGPointMake(frame.minX + 0.03462 * frame.width, frame.minY + 0.96000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.01105 * frame.width, frame.minY + 0.95355 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.02238 * frame.width, frame.minY + 0.96000 * frame.height))
        trianglePath.addLineToPoint(CGPointMake(frame.minX + 0.96539 * frame.width, frame.minY + 0.96000 * frame.height))
        trianglePath.addCurveToPoint(CGPointMake(frame.minX + 0.99518 * frame.width, frame.minY + 0.94304 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.97763 * frame.width, frame.minY + 0.96000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.98896 * frame.width, frame.minY + 0.95355 * frame.height))
        trianglePath.addCurveToPoint(CGPointMake(frame.minX + 0.99571 * frame.width, frame.minY + 0.90880 * frame.height), controlPoint1: CGPointMake(frame.minX + 1.00141 * frame.width, frame.minY + 0.93252 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00161 * frame.width, frame.minY + 0.91950 * frame.height))
        trianglePath.closePath()
        trianglePath.moveToPoint(CGPointMake(frame.minX + 0.09318 * frame.width, frame.minY + 0.89091 * frame.height))
        trianglePath.addLineToPoint(CGPointMake(frame.minX + 0.50001 * frame.width, frame.minY + 0.15308 * frame.height))
        trianglePath.addLineToPoint(CGPointMake(frame.minX + 0.90683 * frame.width, frame.minY + 0.89091 * frame.height))
        trianglePath.addLineToPoint(CGPointMake(frame.minX + 0.09318 * frame.width, frame.minY + 0.89091 * frame.height))
        trianglePath.closePath()
        trianglePath.miterLimit = 4;

        color.setFill()
        trianglePath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRectMake(frame.minX + floor(frame.width * 0.46000 + 0.5), frame.minY + floor(frame.height * 0.34800 - 0.1) + 0.6, floor(frame.width * 0.54000 + 0.5) - floor(frame.width * 0.46000 + 0.5), floor(frame.height * 0.70800 - 0.1) - floor(frame.height * 0.34800 - 0.1)), cornerRadius: 2)
        color.setFill()
        rectanglePath.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(frame.minX + floor(frame.width * 0.46000 + 0.5), frame.minY + floor(frame.height * 0.74000 + 0.5), floor(frame.width * 0.54000 + 0.5) - floor(frame.width * 0.46000 + 0.5), floor(frame.height * 0.82000 + 0.5) - floor(frame.height * 0.74000 + 0.5)))
        color.setFill()
        ovalPath.fill()
    }

    public class func drawInProgressIcon(frame frame: CGRect, color: UIColor) {

        //// oval2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + floor(frame.width * 0.40000 + 0.5), frame.minY + floor(frame.height * 0.40000 + 0.5), floor(frame.width * 0.60000 + 0.5) - floor(frame.width * 0.40000 + 0.5), floor(frame.height * 0.60000 + 0.5) - floor(frame.height * 0.40000 + 0.5)))
        color.setFill()
        oval2Path.fill()


        //// oval3 Drawing
        let oval3Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + floor(frame.width * 0.80000 + 0.5), frame.minY + floor(frame.height * 0.40000 + 0.5), floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.80000 + 0.5), floor(frame.height * 0.60000 + 0.5) - floor(frame.height * 0.40000 + 0.5)))
        color.setFill()
        oval3Path.fill()


        //// oval1 Drawing
        let oval1Path = UIBezierPath(ovalInRect: CGRectMake(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.40000 + 0.5), floor(frame.width * 0.20000 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 0.60000 + 0.5) - floor(frame.height * 0.40000 + 0.5)))
        color.setFill()
        oval1Path.fill()
    }

    public class func drawCompleteIcon(frame frame: CGRect, color: UIColor) {

        //// Circle Drawing
        let circlePath = UIBezierPath()
        circlePath.moveToPoint(CGPointMake(frame.minX + 0.49999 * frame.width, frame.minY + 0.00000 * frame.height))
        circlePath.addCurveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.22428 * frame.width, frame.minY + 0.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.22430 * frame.height))
        circlePath.addCurveToPoint(CGPointMake(frame.minX + 0.49999 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.77570 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.22428 * frame.width, frame.minY + 1.00000 * frame.height))
        circlePath.addCurveToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.77570 * frame.width, frame.minY + 1.00000 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.77570 * frame.height))
        circlePath.addCurveToPoint(CGPointMake(frame.minX + 0.49999 * frame.width, frame.minY + 0.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.22430 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.77570 * frame.width, frame.minY + 0.00000 * frame.height))
        circlePath.closePath()
        circlePath.moveToPoint(CGPointMake(frame.minX + 0.49999 * frame.width, frame.minY + 0.93442 * frame.height))
        circlePath.addCurveToPoint(CGPointMake(frame.minX + 0.06557 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.26045 * frame.width, frame.minY + 0.93442 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.06557 * frame.width, frame.minY + 0.73954 * frame.height))
        circlePath.addCurveToPoint(CGPointMake(frame.minX + 0.49999 * frame.width, frame.minY + 0.06558 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.06557 * frame.width, frame.minY + 0.26046 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.26045 * frame.width, frame.minY + 0.06558 * frame.height))
        circlePath.addCurveToPoint(CGPointMake(frame.minX + 0.93442 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.73953 * frame.width, frame.minY + 0.06558 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.93442 * frame.width, frame.minY + 0.26046 * frame.height))
        circlePath.addCurveToPoint(CGPointMake(frame.minX + 0.49999 * frame.width, frame.minY + 0.93442 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.93442 * frame.width, frame.minY + 0.73954 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.73953 * frame.width, frame.minY + 0.93442 * frame.height))
        circlePath.closePath()
        circlePath.miterLimit = 4;

        color.setFill()
        circlePath.fill()


        //// Check Drawing
        let checkPath = UIBezierPath()
        checkPath.moveToPoint(CGPointMake(frame.minX + 0.68102 * frame.width, frame.minY + 0.33632 * frame.height))
        checkPath.addLineToPoint(CGPointMake(frame.minX + 0.42319 * frame.width, frame.minY + 0.59413 * frame.height))
        checkPath.addLineToPoint(CGPointMake(frame.minX + 0.31897 * frame.width, frame.minY + 0.48993 * frame.height))
        checkPath.addCurveToPoint(CGPointMake(frame.minX + 0.27260 * frame.width, frame.minY + 0.48994 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.30616 * frame.width, frame.minY + 0.47714 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.28541 * frame.width, frame.minY + 0.47713 * frame.height))
        checkPath.addCurveToPoint(CGPointMake(frame.minX + 0.27260 * frame.width, frame.minY + 0.53631 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.25979 * frame.width, frame.minY + 0.50275 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.25979 * frame.width, frame.minY + 0.52350 * frame.height))
        checkPath.addLineToPoint(CGPointMake(frame.minX + 0.40001 * frame.width, frame.minY + 0.66369 * frame.height))
        checkPath.addCurveToPoint(CGPointMake(frame.minX + 0.42319 * frame.width, frame.minY + 0.67329 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.40641 * frame.width, frame.minY + 0.67009 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.41480 * frame.width, frame.minY + 0.67329 * frame.height))
        checkPath.addCurveToPoint(CGPointMake(frame.minX + 0.44638 * frame.width, frame.minY + 0.66368 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.43157 * frame.width, frame.minY + 0.67329 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.43998 * frame.width, frame.minY + 0.67009 * frame.height))
        checkPath.addCurveToPoint(CGPointMake(frame.minX + 0.44645 * frame.width, frame.minY + 0.66360 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.44640 * frame.width, frame.minY + 0.66366 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.44642 * frame.width, frame.minY + 0.66363 * frame.height))
        checkPath.addLineToPoint(CGPointMake(frame.minX + 0.72737 * frame.width, frame.minY + 0.38268 * frame.height))
        checkPath.addCurveToPoint(CGPointMake(frame.minX + 0.72737 * frame.width, frame.minY + 0.33631 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.74019 * frame.width, frame.minY + 0.36988 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.74019 * frame.width, frame.minY + 0.34911 * frame.height))
        checkPath.addCurveToPoint(CGPointMake(frame.minX + 0.68102 * frame.width, frame.minY + 0.33632 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.71457 * frame.width, frame.minY + 0.32350 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.69381 * frame.width, frame.minY + 0.32351 * frame.height))
        checkPath.closePath()
        checkPath.miterLimit = 4;

        color.setFill()
        checkPath.fill()
    }

    public class func drawFolderIcon(frame frame: CGRect, color: UIColor) {

        //// Folder Drawing
        let folderPath = UIBezierPath()
        folderPath.moveToPoint(CGPointMake(frame.minX + 0.93750 * frame.width, frame.minY + 0.10000 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 0.65525 * frame.width, frame.minY + 0.10000 * frame.height))
        folderPath.addCurveToPoint(CGPointMake(frame.minX + 0.56250 * frame.width, frame.minY + 0.16154 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.62069 * frame.width, frame.minY + 0.10000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.58100 * frame.width, frame.minY + 0.11729 * frame.height))
        folderPath.addCurveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.22307 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.56250 * frame.width, frame.minY + 0.16154 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.55437 * frame.width, frame.minY + 0.21797 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 0.06250 * frame.width, frame.minY + 0.22307 * frame.height))
        folderPath.addCurveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.28363 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.02800 * frame.width, frame.minY + 0.22308 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.24966 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.83846 * frame.height))
        folderPath.addCurveToPoint(CGPointMake(frame.minX + 0.06250 * frame.width, frame.minY + 0.90000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.87243 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.02800 * frame.width, frame.minY + 0.90000 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 0.93750 * frame.width, frame.minY + 0.90000 * frame.height))
        folderPath.addCurveToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.83846 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.97200 * frame.width, frame.minY + 0.90000 * frame.height), controlPoint2: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.87243 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.16154 * frame.height))
        folderPath.addCurveToPoint(CGPointMake(frame.minX + 0.93750 * frame.width, frame.minY + 0.10000 * frame.height), controlPoint1: CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.12757 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.97200 * frame.width, frame.minY + 0.10000 * frame.height))
        folderPath.closePath()
        folderPath.moveToPoint(CGPointMake(frame.minX + 0.93750 * frame.width, frame.minY + 0.28363 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 0.93750 * frame.width, frame.minY + 0.83846 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 0.06250 * frame.width, frame.minY + 0.83846 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 0.06250 * frame.width, frame.minY + 0.28461 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.28461 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 0.50600 * frame.width, frame.minY + 0.28431 * frame.height))
        folderPath.addCurveToPoint(CGPointMake(frame.minX + 0.61756 * frame.width, frame.minY + 0.19692 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.56463 * frame.width, frame.minY + 0.27883 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.60088 * frame.width, frame.minY + 0.23846 * frame.height))
        folderPath.addCurveToPoint(CGPointMake(frame.minX + 0.66213 * frame.width, frame.minY + 0.16154 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.63381 * frame.width, frame.minY + 0.15674 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.66213 * frame.width, frame.minY + 0.16154 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 0.93750 * frame.width, frame.minY + 0.16154 * frame.height))
        folderPath.addLineToPoint(CGPointMake(frame.minX + 0.93750 * frame.width, frame.minY + 0.28363 * frame.height))
        folderPath.closePath()
        folderPath.miterLimit = 4;

        color.setFill()
        folderPath.fill()
    }
    
    public class func drawPauseIcon(frame frame: CGRect, color: UIColor) {
        
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.moveToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        rectanglePath.addLineToPoint(CGPointMake(frame.minX + 0.38889 * frame.width, frame.minY + 1.00000 * frame.height))
        rectanglePath.addLineToPoint(CGPointMake(frame.minX + 0.38889 * frame.width, frame.minY + 0.00000 * frame.height))
        rectanglePath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        rectanglePath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        rectanglePath.closePath()
        color.setFill()
        rectanglePath.fill()
        
        
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath()
        rectangle2Path.moveToPoint(CGPointMake(frame.minX + 0.61111 * frame.width, frame.minY + 1.00000 * frame.height))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.00000 * frame.height))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 0.61111 * frame.width, frame.minY + 0.00000 * frame.height))
        rectangle2Path.addLineToPoint(CGPointMake(frame.minX + 0.61111 * frame.width, frame.minY + 1.00000 * frame.height))
        rectangle2Path.closePath()
        color.setFill()
        rectangle2Path.fill()
    }
    

    //// Generated Images

    public class func imageOfDownloadIcon(frame frame: CGRect, color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            TBDirectoryIcons.drawDownloadIcon(frame: frame, color: color)

        let imageOfDownloadIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfDownloadIcon
    }

    public class func imageOfCautionIcon(frame frame: CGRect, color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            TBDirectoryIcons.drawCautionIcon(frame: frame, color: color)

        let imageOfCautionIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCautionIcon
    }

    public class func imageOfInProgressIcon(frame frame: CGRect, color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            TBDirectoryIcons.drawInProgressIcon(frame: frame, color: color)

        let imageOfInProgressIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfInProgressIcon
    }

    public class func imageOfCompleteIcon(frame frame: CGRect, color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            TBDirectoryIcons.drawCompleteIcon(frame: frame, color: color)

        let imageOfCompleteIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfCompleteIcon
    }

    public class func imageOfFolderIcon(frame frame: CGRect, color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            TBDirectoryIcons.drawFolderIcon(frame: frame, color: color)

        let imageOfFolderIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfFolderIcon
    }
    
    public class func imageOfPauseIcon(frame frame: CGRect, color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
        TBDirectoryIcons.drawPauseIcon(frame: frame, color: color)
        
        let imageOfPauseIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return imageOfPauseIcon
    }

}
